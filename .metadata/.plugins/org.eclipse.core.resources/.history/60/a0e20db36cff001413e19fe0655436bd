'''
Created on May 20, 2015

@author: yhuang
'''
import ipaddress
import SubnetTree
import sys
import fileinput
import os
import linecache

from _functools import reduce

    
if len( sys.argv) != 3 :
    print("Usage: \n"
          "     convert <source file> <destfile>\n")
    sys.exit( )

print("ok")

namelst = []
routelst = []
accesslst = []

cGType = ""
cGName = ""

netGLst = {}
serviceGLst = {}
protocolLst = {}

for line in fileinput.input(sys.argv[1]):
    line = line.strip()
    if line.startswith("name ") :
        namelst.append(line)
    elif line.startswith("route "):
        routelst.append(line)
    elif line.startswith("access-list "):
        accesslst.append(line)
    elif line.startswith("object-group "):
        words = line.split()
        cGType = words[1]
        cGName = words[2] 
        if cGType == "network":
            netGLst[cGName] = []
        elif cGType == "service":
            serviceGLst[cGName] = []
        elif cGType == "protocol":
            protocolLst[cGName] = []
    elif line.startswith("description"):
        pass
    elif line.startswith("network-object"):
        netGLst[cGName].append(line)
    elif line.startswith("port-objec"):
        serviceGLst[cGName].append(line)
    elif line.startswith("protocol-object"):
        protocolLst[cGName].append(line)
    elif line.startswith("group-object"):
        if cGType == "network":
            netGLst[cGName].append(line)
        elif cGType == "service":
            serviceGLst[cGName].append(line)
        elif cGType == "protocol":
            protocolLst[cGName].append(line)


print( netGLst["Direct_Access_to_Web_Servers"])
            
 
names = { k: v for d in list( map( lambda x: {x.split()[2]: x.split()[1]}, namelst ) ) for k, v in d.items() }
 
def addRouteByNames(routelst, names):
    def addRoute(rs, line):
        words = line.split()
        if words[2] in names:
            rs[ipaddress.IPv4Network(names[words[2]] + "/" + words[3]).compressed] = words[1]
        else:
            rs[ipaddress.IPv4Network(words[2] + "/" + words[3]).compressed] = words[1]
     
        return rs
 
    return reduce( addRoute, routelst, SubnetTree.SubnetTree())
 
 
routes = addRouteByNames(routelst, names)
 
try:
    print(routes["137.172.26.140"])
except KeyError as err:
    print("Error: %s not found" % err)
     







